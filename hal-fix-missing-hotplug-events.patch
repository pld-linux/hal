Index: hald/hald.c
===================================================================
RCS file: /cvs/hal/hal/hald/hald.c,v
retrieving revision 1.20
diff -u -p -r1.20 hald.c
--- hald/hald.c	12 Oct 2004 20:17:08 -0000	1.20
+++ hald/hald.c	18 Oct 2004 22:35:32 -0000
@@ -41,6 +41,7 @@
 #include <sys/prctl.h>
 #include <sys/capability.h>
 #include <grp.h>
+#include <syslog.h>
 
 #include <dbus/dbus.h>
 #include <dbus/dbus-glib.h>
@@ -322,6 +323,8 @@ main (int argc, char *argv[])
 	GMainLoop *loop;
 	guint sigterm_iochn_listener_source_id;
 
+	openlog ("hald", LOG_PID, LOG_DAEMON);
+
 	g_type_init ();
 
 	logger_init ();
Index: hald/linux/hald_helper.h
===================================================================
RCS file: /cvs/hal/hal/hald/linux/hald_helper.h,v
retrieving revision 1.5
diff -u -p -r1.5 hald_helper.h
--- hald/linux/hald_helper.h	16 Sep 2004 22:04:15 -0000	1.5
+++ hald/linux/hald_helper.h	18 Oct 2004 22:35:32 -0000
@@ -44,7 +44,8 @@ struct hald_helper_msg
 	char subsystem[HALD_HELPER_STRLEN];	/**< subsystem e.g. usb, pci (only for hotplug msg) */
 	char sysfs_path[HALD_HELPER_STRLEN];	/**< path into sysfs without sysfs mountpoint, e.g. /block/sda */
 	char device_name[HALD_HELPER_STRLEN];	/**< absolute path of device node (only for device msg) */
-	int net_ifindex;                       /**< For networking class devices only; the value of the ifindex file */
+	int net_ifindex;                        /**< For networking class devices only; the value of the ifindex file*/
+	time_t time_stamp;                      /**< Time of day we received the hotplug event */
 };
 
 #endif /* HALD_HELPER_H */
Index: hald/linux/osspec.c
===================================================================
RCS file: /cvs/hal/hal/hald/linux/osspec.c,v
retrieving revision 1.48
diff -u -p -r1.48 osspec.c
--- hald/linux/osspec.c	14 Oct 2004 18:37:28 -0000	1.48
+++ hald/linux/osspec.c	18 Oct 2004 22:35:33 -0000
@@ -37,10 +37,12 @@
 #include <unistd.h>
 #include <stdarg.h>
 #include <errno.h>
+#include <syslog.h>
 #include <sys/types.h>
 #include <sys/socket.h>
 #include <sys/un.h>
 #include <sys/utsname.h>
+#include <time.h>
 
 #include <glib.h>
 #include <dbus/dbus.h>
@@ -60,8 +62,12 @@
 
 #include "libsysfs/libsysfs.h"
 
+/** How many ms to sleep on first hotplug event (to queue up other hotplug events) */
 #define FIRST_HOTPLUG_SLEEP 3500
 
+/** How many seconds before we discard a missing hotplug event and move on to the next one */
+#define HOTPLUG_TIMEOUT 15
+
 extern ClassDeviceHandler input_class_handler;
 extern ClassDeviceHandler net_class_handler;
 extern ClassDeviceHandler printer_class_handler;
@@ -133,6 +139,8 @@ static gboolean hald_helper_data (GIOCha
 
 static HalDevice *add_device (const char *sysfs_path, const char *subsystem, struct hald_helper_msg *msg);
 
+static void hotplug_timeout_handler (void);
+
 /** Mount path for sysfs */
 char sysfs_mount_path[SYSFS_PATH_MAX];
 
@@ -156,6 +164,8 @@ osspec_timer_handler (gpointer data)
 		ch->tick (ch);
 	}
 
+	hotplug_timeout_handler ();
+
 	return TRUE;
 }
 
@@ -1394,6 +1404,9 @@ static GList *hotplug_queue_first = NULL
 /** Last hotplug sequence number */
 static guint64 last_hotplug_seqnum = 0;
 
+/** Timestamp of last hotplug */
+static time_t last_hotplug_time_stamp = 0;
+
 /** Hotplug semaphore */
 static gint hotplug_counter = 0;
 
@@ -1435,6 +1448,7 @@ trynext:
 		if (msg->seqnum == last_hotplug_seqnum + 1) {
 			/* yup, found it */
 			last_hotplug_seqnum = msg->seqnum;
+			last_hotplug_time_stamp = msg->time_stamp;
 			hald_helper_hotplug (msg->action, msg->seqnum, g_strdup (msg->subsystem), 
 					     g_strdup (msg->sysfs_path), msg);
 			g_free (msg);
@@ -1444,6 +1458,32 @@ trynext:
 	}
 }
 
+/** Check the queue and do timeout handling on missing hotplug events */
+static void 
+hotplug_timeout_handler (void)
+{
+	time_t now;
+
+	now = time (NULL);
+
+	/* See if there was a last hotplug event */
+	if (last_hotplug_time_stamp > 0) {
+		/* See if it's too long ago we processed */
+		if (now - last_hotplug_time_stamp > HOTPLUG_TIMEOUT) {
+			/* And if anything is actually waiting to be processed */
+			if (hotplug_queue != NULL) {
+				/* also log this to syslog */
+				syslog (LOG_ERR, "Timed out waiting for hotplug event %lld", last_hotplug_seqnum + 1);
+				HAL_ERROR (("Timed out waiting for hotplug event %lld", last_hotplug_seqnum + 1));
+				
+				/* Go to next seqnum and try again */
+				last_hotplug_seqnum++;
+				hald_helper_hotplug_process_queue ();
+			}
+		}
+	}
+}
+
 /** Increment the hotplug semaphore; useful when not wanting to process
  *  hotplug events for a while, like when e.g. adding a hal device
  *  object (which is an asynchronous operation).
@@ -1505,6 +1545,7 @@ hald_helper_first_hotplug_event (gpointe
 		msg = (struct hald_helper_msg *) i->data;
 		HAL_INFO (("*** msg->seqnum = %lld", msg->seqnum));
 		last_hotplug_seqnum = msg->seqnum;
+		last_hotplug_time_stamp = msg->time_stamp;
 	}
 
 	/* Done sleeping on the first hotplug event */
@@ -1576,6 +1617,20 @@ hald_helper_data (GIOChannel *source, 
 		goto out;
 	}
 
+	HAL_INFO (("SEQNUM=%lld, TIMESTAMP=%d", msg.seqnum, msg.time_stamp));
+
+	/* For DEBUG: Drop every 16th hotplug event */
+#if 0
+	if ((msg.seqnum&0x0f) == 0x00) {
+		HAL_INFO (("=========================================="));
+		HAL_INFO (("=========================================="));
+		HAL_INFO (("NOTE NOTE: For debugging, deliberately ignoring hotplug event with SEQNUM=%d", msg.seqnum));
+		HAL_INFO (("=========================================="));
+		HAL_INFO (("=========================================="));
+		goto out;
+	}
+#endif
+
 	switch (msg.type) {
 	case HALD_DEVD:
 		hald_helper_device_name (msg.action, msg.seqnum, g_strdup (msg.subsystem),
@@ -1608,6 +1663,7 @@ hald_helper_data (GIOChannel *source, 
 
 			/* so we only setup one timer */
 			last_hotplug_seqnum = msg.seqnum;
+			last_hotplug_time_stamp = msg.time_stamp;
 
 			goto out;
 		}
Index: tools/linux/hal_dev.c
===================================================================
RCS file: /cvs/hal/hal/tools/linux/hal_dev.c,v
retrieving revision 1.7
diff -u -p -r1.7 hal_dev.c
--- tools/linux/hal_dev.c	14 Sep 2004 12:26:24 -0000	1.7
+++ tools/linux/hal_dev.c	18 Oct 2004 22:35:33 -0000
@@ -44,6 +44,7 @@
 #include <sys/socket.h>
 #include <sys/stat.h>
 #include <sys/un.h>
+#include <time.h>
 
 #include "../../hald/linux/hald_helper.h"
 
@@ -131,6 +132,7 @@ main (int argc, char *argv[], char *envp
 	strncpy (msg.subsystem, subsystem, HALD_HELPER_STRLEN-1);
 	strncpy (msg.sysfs_path, devpath, HALD_HELPER_STRLEN-1);
 	strncpy (msg.device_name, devname, HALD_HELPER_STRLEN-1);
+	msg.time_stamp = time (NULL);
 
 	if (sendto (fd, &msg, sizeof(struct hald_helper_msg), 0,
 		    (struct sockaddr *)&saddr, addrlen) == -1) {
Index: tools/linux/hal_hotplug.c
===================================================================
RCS file: /cvs/hal/hal/tools/linux/hal_hotplug.c,v
retrieving revision 1.23
diff -u -p -r1.23 hal_hotplug.c
--- tools/linux/hal_hotplug.c	16 Sep 2004 22:04:15 -0000	1.23
+++ tools/linux/hal_hotplug.c	18 Oct 2004 22:35:33 -0000
@@ -43,6 +43,7 @@
 #include <sys/socket.h>
 #include <sys/stat.h>
 #include <sys/un.h>
+#include <time.h>
 
 #include "../../hald/linux/hald_helper.h"
 
@@ -350,6 +351,7 @@ main (int argc, char *argv[], char *envp
 	strncpy (msg.subsystem, subsystem, HALD_HELPER_STRLEN-1);
 	strncpy (msg.sysfs_path, devpath, HALD_HELPER_STRLEN-1);
 	msg.net_ifindex = net_ifindex;
+	msg.time_stamp = time (NULL);
 
 	if (sendto (fd, &msg, sizeof(struct hald_helper_msg), 0,
 		    (struct sockaddr *)&saddr, addrlen) == -1) {
